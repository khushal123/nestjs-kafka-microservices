services:
  database:
    networks:
      - kafka-network
    image: postgres
    container_name: database
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    env_file:
      - .env

  task-service:
    networks:
      - kafka-network
    hostname: task-service
    env_file:
      - .env
    depends_on:
      - database
    build:
      context: ./task-service/.
      dockerfile: Dockerfile
    container_name: task-service
    ports:
      - "${TASK_SERVICE_PORT}:${TASK_SERVICE_PORT}"
    volumes:
      - "./task-service/:/workspace/task-service"
    restart: always  

  zookeeper:
    hostname: zookeeper
    networks:
      - kafka-network
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - 2181:2181
    extra_hosts:
      - "localhost: 127.0.0.1"

  kafka:
    networks:
      - kafka-network
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 9094:9094
    extra_hosts:
      - "localhost: 127.0.0.1"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://:9092,localhost://:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://localhost:9092,localhost://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,localhost:PLAINTEXT

  topics:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    command: >+
      bash -c
        "sleep 5s &&
        kafka-topics --create --topic=taskrunner --if-not-exists --bootstrap-server=kafka:9092"

  api:
    hostname: api
    networks:
      - kafka-network
    build:
      context: ./api/
      dockerfile: Dockerfile
    container_name: api
    depends_on:
      - topics
    ports:
      - ${API_PORT}:${API_PORT}
    volumes:
      - "./api/:/workspace/api"
    env_file:
      - ./.env
    environment:
      - KAFKA_BROKERS=${KAFKA_BROKERS}

  consumer:
    networks:
      - kafka-network
    build:
      context: ./kafka/
      dockerfile: Dockerfile
    container_name: consumer
    depends_on:
      - kafka
    volumes:
      - "./api/:/workspace/api"
    env_file:
      - ./.env
    environment:
      - KAFKA_BROKERS=${KAFKA_BROKERS}

  frontend:
    networks:
      - kafka-network
    container_name: frontend
    build: 
      context: ./frontend/
      dockerfile: Dockerfile
    depends_on:
      - api
    volumes:
      - "./frontend/:/workspace/frontend"
    restart: always
    env_file:
      - ./.env
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"

networks:
  kafka-network:
    driver: host